import { AfterContentInit, ChangeDetectorRef, ElementRef, OnChanges, OnInit, SimpleChange } from '@angular/core';
import { MutablePartial } from './utils';
import { AutofocusFixConfig } from './autofocus-fix-config';
/**
 * ## Ways to turn off autofocus: any js-falsely value, except empty string
 *
 *     <!-- with data binding -->
 *     <input [autofocus]=""> <!-- undefined value -->
 *     <input [autofocus]="undefined">
 *     <input [autofocus]="false">
 *     <input [autofocus]="null">
 *     <input [autofocus]="0">
 *     <input [autofocus]="NaN">
 *
 *     <!-- without data binding -->
 *     <input autofocus="undefined">
 *     <input autofocus="false">
 *     <input autofocus="null">
 *     <input autofocus="0">
 *     <input autofocus="NaN">
 *
 *     <input> <!-- disabled by default -->
 *
 *
 * ## Ways to enable autofocus: any js-true value and empty string
 *
 *     <!-- empty string will enable autofocus, this is default html behavior -->
 *     <input [autofocus]="''">
 *     <input autofocus="">
 *     <input autofocus>
 *
 *     <input [autofocus]="true">
 *     <input autofocus="true">
 *
 *     <input [autofocus]="'any other values'">
 *
 * @dynamic
 * Notice: @dynamic used for correctly Document inject
 *         https://github.com/angular/angular/issues/20351
 */
export declare class AutofocusFixDirective implements OnChanges, OnInit, AfterContentInit {
    private readonly $cdr;
    private readonly $document;
    private readonly $config;
    /** Raw value. Always have default value: '' */
    autofocus: any;
    /** @see {@link AutofocusFixConfig.smartEmptyCheck} */
    autofocusFixSmartEmptyCheck?: boolean | any;
    /** @see {@link AutofocusFixConfig.triggerDetectChanges} */
    autofocusFixTriggerDetectChanges?: boolean | any;
    /** @see {@link AutofocusFixConfig.async} */
    autofocusFixAsync?: boolean | any;
    private wasInitialized;
    /** Notice: protected for unit testing */
    protected localConfig: MutablePartial<AutofocusFixConfig>;
    private config;
    private autofocusEnabled;
    private readonly element;
    constructor($er: ElementRef, $cdr: ChangeDetectorRef, $document: Document, $config: AutofocusFixConfig);
    ngOnChanges(changes: {
        [key in keyof AutofocusFixDirective]?: SimpleChange;
    }): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    private checkFocus;
    private checkFocusInternal;
    private readonly amIFocused;
    private normalizeLocalConfigItem;
}
