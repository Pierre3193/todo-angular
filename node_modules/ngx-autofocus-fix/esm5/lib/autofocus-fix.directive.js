/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Inject, Input, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { normalizeInputAsBoolean } from './utils';
import { AutofocusFixConfig } from './autofocus-fix-config';
// @todo: check configuration
/**
 * ## Ways to turn off autofocus: any js-falsely value, except empty string
 *
 *     <!-- with data binding -->
 *     <input [autofocus]=""> <!-- undefined value -->
 *     <input [autofocus]="undefined">
 *     <input [autofocus]="false">
 *     <input [autofocus]="null">
 *     <input [autofocus]="0">
 *     <input [autofocus]="NaN">
 *
 *     <!-- without data binding -->
 *     <input autofocus="undefined">
 *     <input autofocus="false">
 *     <input autofocus="null">
 *     <input autofocus="0">
 *     <input autofocus="NaN">
 *
 *     <input> <!-- disabled by default -->
 *
 *
 * ## Ways to enable autofocus: any js-true value and empty string
 *
 *     <!-- empty string will enable autofocus, this is default html behavior -->
 *     <input [autofocus]="''">
 *     <input autofocus="">
 *     <input autofocus>
 *
 *     <input [autofocus]="true">
 *     <input autofocus="true">
 *
 *     <input [autofocus]="'any other values'">
 *
 * \@dynamic
 * Notice: \@dynamic used for correctly Document inject
 *         https://github.com/angular/angular/issues/20351
 */
var AutofocusFixDirective = /** @class */ (function () {
    function AutofocusFixDirective($er, $cdr, $document, $config) {
        this.$cdr = $cdr;
        this.$document = $document;
        this.$config = $config;
        this.wasInitialized = false;
        /**
         * Notice: protected for unit testing
         */
        this.localConfig = {};
        this.autofocusEnabled = false;
        this.element = $er.nativeElement;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AutofocusFixDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Autofocus works only once. No need to do the initialization on each change detection cycle.
        if (this.wasInitialized) {
            return;
        }
        this.normalizeLocalConfigItem('async', changes.autofocusFixAsync);
        this.normalizeLocalConfigItem('smartEmptyCheck', changes.autofocusFixSmartEmptyCheck);
        this.normalizeLocalConfigItem('triggerDetectChanges', changes.autofocusFixTriggerDetectChanges);
    };
    /**
     * @return {?}
     */
    AutofocusFixDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.element.focus) {
            return console.warn('AutofocusFixDirective: There is no .focus() method on the element: %O', this.element);
        }
        this.config = (/** @type {?} */ ({}));
        AutofocusFixConfig.keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var local = _this.localConfig[key];
            _this.config[key] = local !== undefined ? local : _this.$config[key];
        }));
        this.autofocusEnabled = normalizeInputAsBoolean(this.autofocus, this.config.smartEmptyCheck);
    };
    /**
     * @return {?}
     */
    AutofocusFixDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.wasInitialized = true;
        if (!this.element.focus) {
            return;
        }
        this.checkFocus();
    };
    /**
     * @private
     * @return {?}
     */
    AutofocusFixDirective.prototype.checkFocus = /**
     * @private
     * @return {?}
     */
    function () {
        this.config.async ? setTimeout(this.checkFocusInternal.bind(this)) : this.checkFocusInternal();
    };
    /**
     * @private
     * @return {?}
     */
    AutofocusFixDirective.prototype.checkFocusInternal = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.autofocusEnabled || this.amIFocused) {
            return;
        }
        this.element.focus();
        if (this.config.triggerDetectChanges) {
            this.$cdr.detectChanges();
        }
    };
    Object.defineProperty(AutofocusFixDirective.prototype, "amIFocused", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.$document.activeElement === this.element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} configKey
     * @param {?=} change
     * @return {?}
     */
    AutofocusFixDirective.prototype.normalizeLocalConfigItem = /**
     * @private
     * @param {?} configKey
     * @param {?=} change
     * @return {?}
     */
    function (configKey, change) {
        if (change) {
            this.localConfig[configKey] = normalizeInputAsBoolean(change.currentValue);
        }
    };
    AutofocusFixDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[autofocus]',
                },] }
    ];
    /** @nocollapse */
    AutofocusFixDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: AutofocusFixConfig }
    ]; };
    AutofocusFixDirective.propDecorators = {
        autofocus: [{ type: Input }],
        autofocusFixSmartEmptyCheck: [{ type: Input }],
        autofocusFixTriggerDetectChanges: [{ type: Input }],
        autofocusFixAsync: [{ type: Input }]
    };
    return AutofocusFixDirective;
}());
export { AutofocusFixDirective };
if (false) {
    /**
     * Raw value. Always have default value: ''
     * @type {?}
     */
    AutofocusFixDirective.prototype.autofocus;
    /**
     * @see {\@link AutofocusFixConfig.smartEmptyCheck}
     * @type {?}
     */
    AutofocusFixDirective.prototype.autofocusFixSmartEmptyCheck;
    /**
     * @see {\@link AutofocusFixConfig.triggerDetectChanges}
     * @type {?}
     */
    AutofocusFixDirective.prototype.autofocusFixTriggerDetectChanges;
    /**
     * @see {\@link AutofocusFixConfig.async}
     * @type {?}
     */
    AutofocusFixDirective.prototype.autofocusFixAsync;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.wasInitialized;
    /**
     * Notice: protected for unit testing
     * @type {?}
     * @protected
     */
    AutofocusFixDirective.prototype.localConfig;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.autofocusEnabled;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.$cdr;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.$document;
    /**
     * @type {?}
     * @private
     */
    AutofocusFixDirective.prototype.$config;
}
//# sourceMappingURL=data:application/json;base64,