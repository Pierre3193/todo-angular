/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, NgModule, Optional } from '@angular/core';
import { AutofocusFixConfig } from './autofocus-fix-config';
import { AutofocusFixDirective } from './autofocus-fix.directive';
import { noAutofocusFixConfigError } from './no-autofocus-fix-config.error';
// Exists for AoT support
/**
 * @param {?} options
 * @return {?}
 */
export function configFactory(options) {
    return new AutofocusFixConfig(options);
}
// Exists for AoT support
/** @type {?} */
var AutofocusFixOptionsInternalToken = new InjectionToken('AutofocusFixOptions');
var AutofocusFixModule = /** @class */ (function () {
    function AutofocusFixModule($config) {
        if (!$config) {
            noAutofocusFixConfigError();
        }
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    AutofocusFixModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: AutofocusFixModule,
            providers: [
                {
                    provide: AutofocusFixOptionsInternalToken,
                    useValue: options,
                },
                {
                    provide: AutofocusFixConfig,
                    useFactory: configFactory,
                    deps: [AutofocusFixOptionsInternalToken],
                },
            ],
        };
    };
    AutofocusFixModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [AutofocusFixDirective],
                    exports: [AutofocusFixDirective]
                },] }
    ];
    /** @nocollapse */
    AutofocusFixModule.ctorParameters = function () { return [
        { type: AutofocusFixConfig, decorators: [{ type: Optional }] }
    ]; };
    return AutofocusFixModule;
}());
export { AutofocusFixModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLWZpeC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXV0b2ZvY3VzLWZpeC8iLCJzb3VyY2VzIjpbImxpYi9hdXRvZm9jdXMtZml4Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RixPQUFPLEVBQUUsa0JBQWtCLEVBQXVCLE1BQU0sd0JBQXdCLENBQUM7QUFDakYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7OztBQUc1RSxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQTRCO0lBQ3hELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6QyxDQUFDOzs7SUFFSyxnQ0FBZ0MsR0FBRyxJQUFJLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQztBQUVsRjtJQU1FLDRCQUErQixPQUEyQjtRQUN4RCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1oseUJBQXlCLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7Ozs7O0lBRWEsMEJBQU87Ozs7SUFBckIsVUFBc0IsT0FBaUM7UUFBakMsd0JBQUEsRUFBQSxZQUFpQztRQUVyRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGdDQUFnQztvQkFDekMsUUFBUSxFQUFFLE9BQU87aUJBQ2xCO2dCQUNEO29CQUNFLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFVBQVUsRUFBRSxhQUFhO29CQUN6QixJQUFJLEVBQUUsQ0FBQyxnQ0FBZ0MsQ0FBQztpQkFDekM7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOztnQkE1QkYsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUNyQyxPQUFPLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDakM7Ozs7Z0JBZFEsa0JBQWtCLHVCQWlCTCxRQUFROztJQXdCOUIseUJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTFCWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEF1dG9mb2N1c0ZpeENvbmZpZywgQXV0b2ZvY3VzRml4T3B0aW9ucyB9IGZyb20gJy4vYXV0b2ZvY3VzLWZpeC1jb25maWcnO1xuaW1wb3J0IHsgQXV0b2ZvY3VzRml4RGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRvZm9jdXMtZml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBub0F1dG9mb2N1c0ZpeENvbmZpZ0Vycm9yIH0gZnJvbSAnLi9uby1hdXRvZm9jdXMtZml4LWNvbmZpZy5lcnJvcic7XG5cbi8vIEV4aXN0cyBmb3IgQW9UIHN1cHBvcnRcbmV4cG9ydCBmdW5jdGlvbiBjb25maWdGYWN0b3J5KG9wdGlvbnM6IEF1dG9mb2N1c0ZpeE9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBBdXRvZm9jdXNGaXhDb25maWcob3B0aW9ucyk7XG59XG4vLyBFeGlzdHMgZm9yIEFvVCBzdXBwb3J0XG5jb25zdCBBdXRvZm9jdXNGaXhPcHRpb25zSW50ZXJuYWxUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbignQXV0b2ZvY3VzRml4T3B0aW9ucycpO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtBdXRvZm9jdXNGaXhEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbQXV0b2ZvY3VzRml4RGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBBdXRvZm9jdXNGaXhNb2R1bGUge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSAkY29uZmlnOiBBdXRvZm9jdXNGaXhDb25maWcpIHtcbiAgICBpZiAoISRjb25maWcpIHtcbiAgICAgIG5vQXV0b2ZvY3VzRml4Q29uZmlnRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qob3B0aW9uczogQXV0b2ZvY3VzRml4T3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEF1dG9mb2N1c0ZpeE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQXV0b2ZvY3VzRml4T3B0aW9uc0ludGVybmFsVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBdXRvZm9jdXNGaXhDb25maWcsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29uZmlnRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbQXV0b2ZvY3VzRml4T3B0aW9uc0ludGVybmFsVG9rZW5dLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==