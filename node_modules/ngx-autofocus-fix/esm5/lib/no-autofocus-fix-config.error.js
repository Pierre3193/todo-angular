/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
export function noAutofocusFixConfigError() {
    /** @type {?} */
    var moduleName = 'AutofocusFixModule';
    /** @type {?} */
    var configName = 'AutofocusFixConfig';
    throw new Error(moduleName + ": Can't inject " + configName + ".\n\n    Option 1: Use .forRoot() when you importing the module:\n              Do it in case you import " + moduleName + " to the root module of your application.\n\n    @NgModule({\n      ...\n      imports: [\n        ...\n        " + moduleName + ".forRoot(),     // <--- new code\n      ],\n      ...\n    })\n    export class AppModule {}\n\n\n    Option 2: Provide " + configName + " manually providing " + configName + ":\n              Do it in case you want to provide specific config to the one of your lazy loadable modules.\n\n    @NgModule({\n      ...\n      providers: [\n        ...\n        {                                               // <--- new code\n          provide: " + configName + "                   // <---\n          useValue: new " + configName + "({ ... }),    // <---\n        },                                              // <---\n      ],\n      ...\n    })\n    export class AppModule {}\n  ");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm8tYXV0b2ZvY3VzLWZpeC1jb25maWcuZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXV0b2ZvY3VzLWZpeC8iLCJzb3VyY2VzIjpbImxpYi9uby1hdXRvZm9jdXMtZml4LWNvbmZpZy5lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTSxVQUFVLHlCQUF5Qjs7UUFDakMsVUFBVSxHQUFHLG9CQUFvQjs7UUFDakMsVUFBVSxHQUFHLG9CQUFvQjtJQUV2QyxNQUFNLElBQUksS0FBSyxDQUFLLFVBQVUsdUJBQW9CLFVBQVUsaUhBR3BCLFVBQVUsdUhBTXpDLFVBQVUsZ0lBT0ksVUFBVSw0QkFBeUIsVUFBVSxrUkFRaEQsVUFBVSw0REFDTixVQUFVLDJKQU1qQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG5vQXV0b2ZvY3VzRml4Q29uZmlnRXJyb3IoKSB7XG4gIGNvbnN0IG1vZHVsZU5hbWUgPSAnQXV0b2ZvY3VzRml4TW9kdWxlJztcbiAgY29uc3QgY29uZmlnTmFtZSA9ICdBdXRvZm9jdXNGaXhDb25maWcnO1xuXG4gIHRocm93IG5ldyBFcnJvcihgJHsgbW9kdWxlTmFtZSB9OiBDYW4ndCBpbmplY3QgJHsgY29uZmlnTmFtZSB9LlxuXG4gICAgT3B0aW9uIDE6IFVzZSAuZm9yUm9vdCgpIHdoZW4geW91IGltcG9ydGluZyB0aGUgbW9kdWxlOlxuICAgICAgICAgICAgICBEbyBpdCBpbiBjYXNlIHlvdSBpbXBvcnQgJHsgbW9kdWxlTmFtZSB9IHRvIHRoZSByb290IG1vZHVsZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuXG4gICAgQE5nTW9kdWxlKHtcbiAgICAgIC4uLlxuICAgICAgaW1wb3J0czogW1xuICAgICAgICAuLi5cbiAgICAgICAgJHsgbW9kdWxlTmFtZSB9LmZvclJvb3QoKSwgICAgIC8vIDwtLS0gbmV3IGNvZGVcbiAgICAgIF0sXG4gICAgICAuLi5cbiAgICB9KVxuICAgIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cblxuXG4gICAgT3B0aW9uIDI6IFByb3ZpZGUgJHsgY29uZmlnTmFtZSB9IG1hbnVhbGx5IHByb3ZpZGluZyAkeyBjb25maWdOYW1lIH06XG4gICAgICAgICAgICAgIERvIGl0IGluIGNhc2UgeW91IHdhbnQgdG8gcHJvdmlkZSBzcGVjaWZpYyBjb25maWcgdG8gdGhlIG9uZSBvZiB5b3VyIGxhenkgbG9hZGFibGUgbW9kdWxlcy5cblxuICAgIEBOZ01vZHVsZSh7XG4gICAgICAuLi5cbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAuLi5cbiAgICAgICAgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0tLSBuZXcgY29kZVxuICAgICAgICAgIHByb3ZpZGU6ICR7IGNvbmZpZ05hbWUgfSAgICAgICAgICAgICAgICAgICAvLyA8LS0tXG4gICAgICAgICAgdXNlVmFsdWU6IG5ldyAke2NvbmZpZ05hbWV9KHsgLi4uIH0pLCAgICAvLyA8LS0tXG4gICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLS1cbiAgICAgIF0sXG4gICAgICAuLi5cbiAgICB9KVxuICAgIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAgYCk7XG59XG4iXX0=