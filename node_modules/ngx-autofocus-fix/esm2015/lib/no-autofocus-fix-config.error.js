/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
export function noAutofocusFixConfigError() {
    /** @type {?} */
    const moduleName = 'AutofocusFixModule';
    /** @type {?} */
    const configName = 'AutofocusFixConfig';
    throw new Error(`${moduleName}: Can't inject ${configName}.

    Option 1: Use .forRoot() when you importing the module:
              Do it in case you import ${moduleName} to the root module of your application.

    @NgModule({
      ...
      imports: [
        ...
        ${moduleName}.forRoot(),     // <--- new code
      ],
      ...
    })
    export class AppModule {}


    Option 2: Provide ${configName} manually providing ${configName}:
              Do it in case you want to provide specific config to the one of your lazy loadable modules.

    @NgModule({
      ...
      providers: [
        ...
        {                                               // <--- new code
          provide: ${configName}                   // <---
          useValue: new ${configName}({ ... }),    // <---
        },                                              // <---
      ],
      ...
    })
    export class AppModule {}
  `);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm8tYXV0b2ZvY3VzLWZpeC1jb25maWcuZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXV0b2ZvY3VzLWZpeC8iLCJzb3VyY2VzIjpbImxpYi9uby1hdXRvZm9jdXMtZml4LWNvbmZpZy5lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTSxVQUFVLHlCQUF5Qjs7VUFDakMsVUFBVSxHQUFHLG9CQUFvQjs7VUFDakMsVUFBVSxHQUFHLG9CQUFvQjtJQUV2QyxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUksVUFBVyxrQkFBbUIsVUFBVzs7O3lDQUdyQixVQUFXOzs7Ozs7VUFNMUMsVUFBVzs7Ozs7Ozt3QkFPRyxVQUFXLHVCQUF3QixVQUFXOzs7Ozs7OztxQkFRakQsVUFBVzswQkFDUCxVQUFVOzs7Ozs7R0FNakMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBub0F1dG9mb2N1c0ZpeENvbmZpZ0Vycm9yKCkge1xuICBjb25zdCBtb2R1bGVOYW1lID0gJ0F1dG9mb2N1c0ZpeE1vZHVsZSc7XG4gIGNvbnN0IGNvbmZpZ05hbWUgPSAnQXV0b2ZvY3VzRml4Q29uZmlnJztcblxuICB0aHJvdyBuZXcgRXJyb3IoYCR7IG1vZHVsZU5hbWUgfTogQ2FuJ3QgaW5qZWN0ICR7IGNvbmZpZ05hbWUgfS5cblxuICAgIE9wdGlvbiAxOiBVc2UgLmZvclJvb3QoKSB3aGVuIHlvdSBpbXBvcnRpbmcgdGhlIG1vZHVsZTpcbiAgICAgICAgICAgICAgRG8gaXQgaW4gY2FzZSB5b3UgaW1wb3J0ICR7IG1vZHVsZU5hbWUgfSB0byB0aGUgcm9vdCBtb2R1bGUgb2YgeW91ciBhcHBsaWNhdGlvbi5cblxuICAgIEBOZ01vZHVsZSh7XG4gICAgICAuLi5cbiAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgLi4uXG4gICAgICAgICR7IG1vZHVsZU5hbWUgfS5mb3JSb290KCksICAgICAvLyA8LS0tIG5ldyBjb2RlXG4gICAgICBdLFxuICAgICAgLi4uXG4gICAgfSlcbiAgICBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG5cblxuICAgIE9wdGlvbiAyOiBQcm92aWRlICR7IGNvbmZpZ05hbWUgfSBtYW51YWxseSBwcm92aWRpbmcgJHsgY29uZmlnTmFtZSB9OlxuICAgICAgICAgICAgICBEbyBpdCBpbiBjYXNlIHlvdSB3YW50IHRvIHByb3ZpZGUgc3BlY2lmaWMgY29uZmlnIHRvIHRoZSBvbmUgb2YgeW91ciBsYXp5IGxvYWRhYmxlIG1vZHVsZXMuXG5cbiAgICBATmdNb2R1bGUoe1xuICAgICAgLi4uXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLi4uXG4gICAgICAgIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtLS0gbmV3IGNvZGVcbiAgICAgICAgICBwcm92aWRlOiAkeyBjb25maWdOYW1lIH0gICAgICAgICAgICAgICAgICAgLy8gPC0tLVxuICAgICAgICAgIHVzZVZhbHVlOiBuZXcgJHtjb25maWdOYW1lfSh7IC4uLiB9KSwgICAgLy8gPC0tLVxuICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LS0tXG4gICAgICBdLFxuICAgICAgLi4uXG4gICAgfSlcbiAgICBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gIGApO1xufVxuIl19