/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, NgModule, Optional } from '@angular/core';
import { AutofocusFixConfig } from './autofocus-fix-config';
import { AutofocusFixDirective } from './autofocus-fix.directive';
import { noAutofocusFixConfigError } from './no-autofocus-fix-config.error';
// Exists for AoT support
/**
 * @param {?} options
 * @return {?}
 */
export function configFactory(options) {
    return new AutofocusFixConfig(options);
}
// Exists for AoT support
/** @type {?} */
const AutofocusFixOptionsInternalToken = new InjectionToken('AutofocusFixOptions');
export class AutofocusFixModule {
    /**
     * @param {?} $config
     */
    constructor($config) {
        if (!$config) {
            noAutofocusFixConfigError();
        }
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options = {}) {
        return {
            ngModule: AutofocusFixModule,
            providers: [
                {
                    provide: AutofocusFixOptionsInternalToken,
                    useValue: options,
                },
                {
                    provide: AutofocusFixConfig,
                    useFactory: configFactory,
                    deps: [AutofocusFixOptionsInternalToken],
                },
            ],
        };
    }
}
AutofocusFixModule.decorators = [
    { type: NgModule, args: [{
                declarations: [AutofocusFixDirective],
                exports: [AutofocusFixDirective]
            },] }
];
/** @nocollapse */
AutofocusFixModule.ctorParameters = () => [
    { type: AutofocusFixConfig, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLWZpeC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYXV0b2ZvY3VzLWZpeC8iLCJzb3VyY2VzIjpbImxpYi9hdXRvZm9jdXMtZml4Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBdUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV4RixPQUFPLEVBQUUsa0JBQWtCLEVBQXVCLE1BQU0sd0JBQXdCLENBQUM7QUFDakYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7OztBQUc1RSxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQTRCO0lBQ3hELE9BQU8sSUFBSSxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN6QyxDQUFDOzs7TUFFSyxnQ0FBZ0MsR0FBRyxJQUFJLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQztBQU1sRixNQUFNLE9BQU8sa0JBQWtCOzs7O0lBRTdCLFlBQStCLE9BQTJCO1FBQ3hELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWix5QkFBeUIsRUFBRSxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQStCLEVBQUU7UUFFckQsT0FBTztZQUNMLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxnQ0FBZ0M7b0JBQ3pDLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixVQUFVLEVBQUUsYUFBYTtvQkFDekIsSUFBSSxFQUFFLENBQUMsZ0NBQWdDLENBQUM7aUJBQ3pDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBNUJGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztnQkFDckMsT0FBTyxFQUFFLENBQUMscUJBQXFCLENBQUM7YUFDakM7Ozs7WUFkUSxrQkFBa0IsdUJBaUJMLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEF1dG9mb2N1c0ZpeENvbmZpZywgQXV0b2ZvY3VzRml4T3B0aW9ucyB9IGZyb20gJy4vYXV0b2ZvY3VzLWZpeC1jb25maWcnO1xuaW1wb3J0IHsgQXV0b2ZvY3VzRml4RGlyZWN0aXZlIH0gZnJvbSAnLi9hdXRvZm9jdXMtZml4LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBub0F1dG9mb2N1c0ZpeENvbmZpZ0Vycm9yIH0gZnJvbSAnLi9uby1hdXRvZm9jdXMtZml4LWNvbmZpZy5lcnJvcic7XG5cbi8vIEV4aXN0cyBmb3IgQW9UIHN1cHBvcnRcbmV4cG9ydCBmdW5jdGlvbiBjb25maWdGYWN0b3J5KG9wdGlvbnM6IEF1dG9mb2N1c0ZpeE9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBBdXRvZm9jdXNGaXhDb25maWcob3B0aW9ucyk7XG59XG4vLyBFeGlzdHMgZm9yIEFvVCBzdXBwb3J0XG5jb25zdCBBdXRvZm9jdXNGaXhPcHRpb25zSW50ZXJuYWxUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbignQXV0b2ZvY3VzRml4T3B0aW9ucycpO1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtBdXRvZm9jdXNGaXhEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbQXV0b2ZvY3VzRml4RGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBBdXRvZm9jdXNGaXhNb2R1bGUge1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSAkY29uZmlnOiBBdXRvZm9jdXNGaXhDb25maWcpIHtcbiAgICBpZiAoISRjb25maWcpIHtcbiAgICAgIG5vQXV0b2ZvY3VzRml4Q29uZmlnRXJyb3IoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZvclJvb3Qob3B0aW9uczogQXV0b2ZvY3VzRml4T3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEF1dG9mb2N1c0ZpeE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQXV0b2ZvY3VzRml4T3B0aW9uc0ludGVybmFsVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IG9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBdXRvZm9jdXNGaXhDb25maWcsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY29uZmlnRmFjdG9yeSxcbiAgICAgICAgICBkZXBzOiBbQXV0b2ZvY3VzRml4T3B0aW9uc0ludGVybmFsVG9rZW5dLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbn1cbiJdfQ==